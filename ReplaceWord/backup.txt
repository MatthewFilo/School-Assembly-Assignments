.global replaceword
.data
.text
// Global Variables: R0 = *sentence, R1 = *Wordtobereplaced, R2 = *NewWord
replaceword:
  mov r12, r13
  sub sp, #32
  push {lr}


  Initialization:
    mov r3, #0 // Counter Variable for Original Word Length
    mov r4, #0 // Counter Variable for New Word Length
    mov r5, #0 // Array Indexer Variable
    mov r6, #0 // Loader for Strings
    mov r7, #0
    mov r8, #0 // Count of Old Word
    mov r9, #0 // Count of New Word
    mov r10, #0 // New Array that will eventually replace old array at end of function.
  

  counterforoldword: // Beings Function by counting amount of characters in new word
    ldrb r3,[r1,r5]
    add r5, #1
    cmp r3, #0
    beq counter2
    add r8, #1
    b counterforoldword
  /*counterfornewword: // Counter for new word
    ldrb r6,[r2,r9]
    cmp r6,#0
    beq counter2
    add r9,#1 
    b counterfornewword*/
  counter2: // Reset variables
    mov r5,#0
    sub r8,#1 // We subtract the Null Byte 
    //sub r9, #1 // We subtract the Null Byte

  //**************************************************************************

  mov r9,#0

  L1:
    ldrb r3,[r0,r5]   
    cmp r3,#','
    beq done1
    cmp r3,#0
    beq finished
    add r5,#1
    b L1
  done1:
    sub r5, #1 
    ldrb r3,[r0,r5] 
    ldrb r4,[r1,r8] 
    cmp r3,r4
    beq L3111
    bne L2

  L2:
    sub r5,#1
    ldrb r6,[r0,r5]
    cmp r6,#','
    beq L211
    b L2
  L211:
    mov r7,#0
    add r5,#1
    b L21
  L21:
    ldrb r6,[r0,r5]
    cmp r6,#','
    beq L22
    strb r6,[r10,r7]
    add r5,#1
    add r7,#1
    b L21
  L22:
    mov r7,#0
    add r5,#1
    b L222
  L222:
    ldrb r6,[r10,r7]
    cmp r6,#0
    beq L23
    strb r6,[r0,r9]
    add r9,#1
    add r7,#1
    b L222
  L23:
    mov r10,#0
    b L1

  L3111:
    mov r7,#0
    b L3
  L3:
    ldrb r6,[r2,r7]
    strb r6,[r10,r7]
    cmp r6,#0
    beq L31
    add r7,#1
    b L3
  L31:
    mov r7,#0
    b L32
  L32:
    cmp r6,#0
    beq L33
    ldrb r6,[r10,r7]
    strb r6,[r0,r9]
    add r7,#1
    add r9,#1
    b L32
  L33:
    add r9,#1
    mov r6,#','
    strb r6,[r0,r9]
    b L34
  L34:
    mov r10,#0
    b L1


finished:
  pop {lr}
  mov sp, r12
  mov pc, lr


